{
  "openapi": "3.0.0",
  "info": {
    "title": "IUDX Auth",
    "version": "1.0",
    "description": "API specification for IUDX Auth APIs. These APIs are used by Providers and other users to manage access policies and request for tokens.\n**All Auth APIs require a valid IUDX issued client certificate.**",
    "contact": {
      "url": "https://www.iudx.org.in/"
    }
  },
  "servers": [
    {
      "url": "https://authorization.iudx.org.in",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Certificate APIs",
      "description": "Certificate related APIs"
    },
    {
      "name": "Token APIs",
      "description": "APIs related to operations on tokens"
    },
    {
      "name": "Access APIs",
      "description": "APIs related to operations on access rules/policies on resources"
    }
  ],
  "paths": {
    "/auth/v1/certificate-info": {
      "post": {
        "summary": "Get user certificate details",
        "operationId": "post-auth-v1-certificate-info",
        "parameters": [],
        "description": "**Requires a valid client certificate issued by IUDX**\n\nGet details of the certificate as well as the roles of the user associated with the certificate. This API can be also used to check whether a certificate is expired, or if there is a mismatch between the private key and certificate.\n\nAny certificate error will result in a `400 Bad Request` error. The following errors are possible:\n- No client certificate sent with request for API that requires a client side certificate\n- Error in client certificate verification. This can likely be caused by using an expired certificate to call the API or if the certificate is not accepted by the AAA server\n- Making an HTTP request to an HTTPS endpoint\n",
        "responses": {
          "200": {
            "description": "Returns certificate details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The email address of the user"
                    },
                    "certificate-class": {
                      "type": "integer",
                      "description": "The certificate class"
                    },
                    "serial": {
                      "type": "string",
                      "description": "The serial of the certificate"
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "The fingerprint of the certificate"
                    },
                    "roles": {
                      "type": "array",
                      "description": "Roles for which the user has been registered for",
                      "items": {
                        "type": "string",
                        "enum": [
                          "provider",
                          "consumer",
                          "onboarder",
                          "data ingester"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "certificate-class",
                    "serial",
                    "fingerprint",
                    "roles"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "test@iisc.ac.in",
                      "certificate-class": 3,
                      "serial": "1b5e3735d350d93918730bb7e467fd1d3350e2b8",
                      "fingerprint": "b4:5f:51:3d:35:af:cf:38:a9:98:a7:25:07:89:88:67:0e:17:13:cf",
                      "roles": [
                        "onboarder",
                        "data ingester"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NGINX-Errors"
                }
              }
            }
          }
        },
        "tags": [
          "Certificate APIs"
        ]
      }
    },
    "/auth/v1/token": {
      "post": {
        "summary": "Request for a token",
        "operationId": "post-auth-v1-token",
        "responses": {
          "200": {
            "description": "Token has been successfully generated for requested resources and respective APIs. \n**The token validity is set to 1 week**\n\nThe token structure is as follows:\n`Auth Server URL`/`Email address of token requester`/`Random string (32 characters in hex)`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "token-type": {
                      "type": "string"
                    },
                    "expires-in": {
                      "type": "integer"
                    },
                    "is_token_valid": {
                      "type": "boolean"
                    },
                    "server-token": {
                      "type": "object",
                      "properties": {
                        "<resource-server-name>": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "token": "authorization.iudx.org.in/consumer@datakaveri.org/5d26f8526d75f5ed9407d7a808edac38",
                      "token-type": "IUDX",
                      "expires-in": 604800,
                      "is_token_valid": true,
                      "server-token": {
                        "rs.iudx.org.in": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- Missing or malformed request\n  - If `apis` is invalid or no `apis` sent for a resource ID that requires it\n  - If `id` is invalid\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "//": {
                          "type": "string"
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid request array": {
                    "value": {
                      "error": {
                        "message": "'request' must be a valid JSON array with at least 1 element"
                      }
                    }
                  },
                  "If no access policy set for the resource or an invalid id": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid 'id'; no access control policies have been set for this 'id' by the data provider",
                        "invalidinput": "iisc.ac.in/85a36273d77dac4cf38114fca1bbe64392547f86/example.com/2/t/*"
                      }
                    }
                  },
                  "apis is invalid": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "'apis' must be a valid JSON array",
                        "invalid-input": {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/2/t/*",
                          "apis": "/ngsi-ld/v1/subscription"
                        }
                      }
                    }
                  },
                  "No apis requested for particular resource ID": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "'apis' is required for this id",
                        "invalid-input": {
                          "id": "iisc.ac.in/0808eb81ea0e5773187ae06110f55915a55f5c05/example.com/pune-aqm/*"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If not permitted to access a certain resource, or combination of resource and API\n- If no access policy set for `id` by the concerned Provider\n- Incorrect Certificate used",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "//": {
                          "type": "string"
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "object",
                              "description": "The request object that is not accessible"
                            }
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/Incorrect-Cert-Class"
                    }
                  ]
                },
                "examples": {
                  "Unauthorized to access resource with subcription API": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Unauthorized",
                        "invalid-input": {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/2/old",
                          "api": "/ngsi-ld/v1/subscription",
                          "method": "*"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "If user has issued too many tokens in a time frame",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Too many requests"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX**\n\nRequest for a token to access protected resources and APIs on those resources. The issued token is then included as part of the request to the resource server for said resource. Once the resource server validates the token, the protected resource is shared with the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "maxLength": 512,
                          "minLength": 1,
                          "description": "A valid **IUDX ID**"
                        },
                        "apis": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 512,
                            "enum": [
                              "/ngsi-ld/v1/subscription",
                              "/ngsi-ld/v1/temporal/entities",
                              "/ngsi-ld/v1/entityOperations/query",
                              "/ngsi-ld/v1/entities/<resource-group>",
                              "/ngsi-ld/v1/entities",
                              "/iudx/v1/adapter"
                            ]
                          }
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                },
                "required": [
                  "request"
                ]
              },
              "examples": {
                "Requesting token for Data Ingester": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/*",
                        "apis": [
                          "/iudx/v1/adapter"
                        ]
                      }
                    ]
                  }
                },
                "Requesting token for Onboarder": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/catalogue.iudx.io/catalogue/crud"
                      }
                    ]
                  }
                },
                "Requesting token for Subscription capability APIs": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/*",
                        "apis": [
                          "/ngsi-ld/v1/subscription"
                        ]
                      }
                    ]
                  }
                },
                "Requesting token for Temporal capability APIs": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/*",
                        "apis": [
                          "/ngsi-ld/v1/temporal/entities",
                          "/ngsi-ld/v1/entities/datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm"
                        ]
                      }
                    ]
                  }
                },
                "Requesting token for Complex capability APIs": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/*",
                        "apis": [
                          "/ngsi-ld/v1/entities",
                          "/ngsi-ld/v1/entities/datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                          "/ngsi-ld/v1/entityOperations/query"
                        ]
                      }
                    ]
                  }
                },
                "Requesting for multiple resource groups and resource items": {
                  "value": {
                    "request": [
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/*",
                        "apis": [
                          "/ngsi-ld/v1/entities",
                          "/ngsi-ld/v1/entities/datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                          "/ngsi-ld/v1/entityOperations/query"
                        ]
                      },
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/item-1",
                        "apis": [
                          "/ngsi-ld/v1/entities",
                          "/ngsi-ld/v1/entities/datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm"
                        ]
                      },
                      {
                        "id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm/item-2",
                        "apis": [
                          "/ngsi-ld/v1/subscription"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "- The `request` array consists of objects that specify resource IDs for which access is desired.\n- `id` is a **valid IUDX resource ID** of the resource group or resource item\n    - **For a token for access to the entire resource group, the resource group ID must be suffixed by '/*'**\n- `apis` is an array of APIs that can be called on the respective resource ID\n\nThe structure of the ID is `provider-email-domain/provider-email-SHA1/resource-server-domain/resource-group/resource-item` (to specify a resource group, `resource-item` is not needed)\n\n### Consumers\n\nFor consumers, the APIs are defined by the existing capabilities:\n\n- Subscription capability: ```/ngsi-ld/v1/subscription```\n- Temporal capability: ```/ngsi-ld/v1/temporal/entities``` ```/ngsi-ld/v1/entities/<resource-group>```\n- Complex capability: ```/ngsi-ld/v1/entityOperations/query``` ```/ngsi-ld/v1/entities/<resource-group>``` ```/ngsi-ld/v1/entities``` \n\nFor the APIs with ```<resource-group>```, the API text will include the full resource group ID. For example, if id is \n      \n      iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/pune-aqm/sensor-1\nthe entities API for that will be:\n\n    /ngsi-ld/v1/entities/iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/pune-aqm\n\n### Data Ingesters\n\nData ingesters specifically have only 1 accessible API:\n```/iudx/v1/adapter```\n\n### Onboarders\n\n**Onboarders have no valid APIs**. The `id` field must be in the format:\n```<provider-domain>/<SHA1-of-provider-email>/<catalogue-url>/catalogue/crud```\n\nFor example, if the provider is *provider.foobar@datakaveri.org*, `id` will be:\n    \n    datakaveri.org/49276e9045a8a4c5c5bcc5b3b6923786896ff02d/catalogue.iudx.org.in/catalogue/crud"
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/token/introspect": {
      "post": {
        "summary": "Introspect a token",
        "operationId": "post-auth-v1-token-introspect",
        "responses": {
          "200": {
            "description": "A successful introspection will return details of the token. ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "consumer": {
                      "type": "string",
                      "description": "Email of consumer who requested the token"
                    },
                    "expiry": {
                      "type": "string",
                      "description": "Time of expiry of token",
                      "format": "date-time"
                    },
                    "request": {
                      "type": "array",
                      "description": "The resources and APIs for which the token was issued",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The resource ID"
                          },
                          "apis": {
                            "type": "array",
                            "description": "APIs which can be called on the resource",
                            "items": {
                              "type": "string"
                            }
                          },
                          "methods": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "body": {
                            "type": "object",
                            "nullable": true
                          }
                        }
                      }
                    },
                    "consumer-class-certificate": {
                      "type": "integer",
                      "description": "Class of the certificate that requested the token"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "consumer": "test@iisc.ac.in",
                      "expiry": "2020-09-27T10:36:36.893Z",
                      "request": [
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/group-1/*",
                          "apis": [
                            "/ngsi-ld/v1/subscription"
                          ],
                          "body": null,
                          "methods": [
                            "*"
                          ]
                        },
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/group-1/two",
                          "apis": [
                            "/ngsi-ld/v1/entities"
                          ],
                          "body": null,
                          "methods": [
                            "*"
                          ]
                        }
                      ],
                      "consumer-certificate-class": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `token` is missing or is a malformed token\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Missing token field": {
                    "value": {
                      "error": {
                        "message": "No 'token' found in the body"
                      }
                    }
                  },
                  "Malformed token": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the token:\n  - does not exist\n  - is expired\n  - has been revoked\n- Incorrect Certificate used",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/Incorrect-Cert-Class"
                    }
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-1 client certificate issued by IUDX OR a valid certificate issued by a trusted CA (e.g. Let's Encrypt). The certificate must contain the hostname of the resource server**\n\nResource servers can introspect tokens to get the resource IDs, APIs etc. that the token has been issued for.\n\n**A resource server can only introspect a token that has been issued for resources that belong to it.**\n\nFor example, a resource ID __*datakaveri.org/73e2..aab4/rs.iudx.org.in/pune-aqm/resource1*__ refers to a resource hosted in the resource server __*rs.iudx.org.in*__. A token issued for this resource can be instrospected by the server __*rs.iudx.org.in*__. However, if a server __*rs.iudx.io*__ obtains the token and performs Introspect, an *Invalid token* error will be returned.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "A **valid IUDX token**",
                    "maxLength": 512
                  }
                },
                "required": [
                  "token"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "token": "authorization.iudx.org.in/test@iisc.ac.in/704b949bdb7a7217c124c62821df6b62"
                  }
                }
              }
            }
          },
          "description": "A valid IUDX token is sent in the request. The structure of the token is `Auth-Server-URL/email-of-issued-to/32-chars-in-hexadecimal`"
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/token/revoke": {
      "post": {
        "summary": "Revoke a token",
        "operationId": "post-auth-v1-token-revoke",
        "responses": {
          "200": {
            "description": "The response will contain the number of tokens revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "num-tokens-revoked": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "num-tokens-revoked"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "num-tokens-revoked": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `token-hashes` is missing\n- If `token-hashes` is not a valid JSON array\n- If a token hash is invalid, does not exist or has already been revoked \n    - **All valid tokens before the invalid token hash will be revoked. `num-tokens-revoked` will be returned with the number of tokens revoked till the invalid token hash**\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "string",
                              "description": "The invalid hash"
                            },
                            "num-tokens-revoked": {
                              "type": "integer",
                              "description": "number of tokens revoked in array till the invalid token hash"
                            }
                          },
                          "required": [
                            "message"
                          ]
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "If token-hashes missing": {
                    "value": {
                      "error": {
                        "message": "No 'tokens' or 'token-hashes' found"
                      }
                    }
                  },
                  "If token-hashes is invalid JSON array": {
                    "value": {
                      "error": {
                        "message": "'token-hashes' must be a valid JSON array"
                      }
                    }
                  },
                  "If a token hash is invalid, does not exist or is already revoked": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid 'token hash'",
                        "invalid-input": "837788ad6d1b351f7b8382c6c9f8032f71f3f2d059b7f27b32d15d9685cf16f0",
                        "num-tokens-revoked": 9
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - If revoke called by a user who is not a Provider (certificate class < 3)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incorrect-Cert-Class"
                },
                "examples": {
                  "If a consumer calls the API": {
                    "value": {
                      "error": {
                        "message": "A class-3 (or above) certificate is required to call this API"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-3/provider client certificate issued by IUDX**\n\nRevoke list of tokens using token hashes obtained from audit API. The revoked tokens cannot be introspected and are thus invalid.\n\n**When sending an array of token hashes, all valid tokens before a invalid token hash will be revoked. `num-tokens-revoked` will be returned with the number of tokens revoked till the invalid token hash**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token-hashes": {
                    "type": "array",
                    "minItems": 1,
                    "description": "Hashes must be lower case hex and exactly 64 characters",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-f]+$",
                      "minLength": 64,
                      "maxLength": 64
                    }
                  }
                },
                "required": [
                  "token-hashes"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "token-hashes": [
                      "ba097163a905f6cf32cfdb2092fa3ec12073e87b8b1b3cc42f5e029ba7980eb7",
                      "837788ad6d1b351f7b8382c6c9f8032f71f3f2d059b7f27b32d15d9685cf16f0"
                    ]
                  }
                }
              }
            }
          },
          "description": "The request should contain an array of token hashes. (Each hash must be in lower-case hex representation)"
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/token/revoke-all": {
      "post": {
        "summary": "Revoke all tokens belonging to a certificate",
        "operationId": "post-auth-v1-token-revoke-all",
        "responses": {
          "200": {
            "description": "The number of tokens revoked for that particular certficate/consumer will be returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "num-tokens-revoked": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "num-tokens-revoked"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "num-tokens-revoked": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `serial`, `fingerprint` is missing or invalid\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Missing serial": {
                    "value": {
                      "error": {
                        "message": "No 'serial' found in the body"
                      }
                    }
                  },
                  "Missing fingerprint": {
                    "value": {
                      "error": {
                        "message": "No 'fingerprint' found in the body"
                      }
                    }
                  },
                  "Invalid serial": {
                    "value": {
                      "error": {
                        "message": "Invalid 'serial'"
                      }
                    }
                  },
                  "Invalid fingerprint": {
                    "value": {
                      "error": {
                        "message": "Invalid 'fingerprint"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - If revoke called by a user who is not a Provider (certificate class < 3)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incorrect-Cert-Class"
                },
                "examples": {
                  "If a consumer calls the API": {
                    "value": {
                      "error": {
                        "message": "A class-3 (or above) certificate is required to call this API"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-3/provider client certificate issued by IUDX**\n\nRevoke all tokens issued to a particular consumer based on their certificate. The certificate serial number and fingerprint are obtained from audit API. The revoked tokens cannot be introspected and are thus invalid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serial": {
                    "type": "string",
                    "pattern": "^-?[a-fA-F0-9]{40}$",
                    "minLength": 1,
                    "maxLength": 512
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "valid certificate fingerprint delimited by :",
                    "minLength": 1,
                    "maxLength": 512,
                    "pattern": "^([a-fA-F0-9]{2}:){19}[a-fA-F0-9]{2}$"
                  }
                },
                "required": [
                  "serial",
                  "fingerprint"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "serial": "5379c47881b51bb65c3a01da22dc175e6ec03e04",
                    "fingerprint": "a0:75:1b:72:7c:77:86:04:47:ce:25:fb:e1:ad:0c:29:db:87:16:71"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/audit/tokens": {
      "post": {
        "summary": "Audit tokens",
        "operationId": "post-auth-v1-audit-tokens",
        "responses": {
          "200": {
            "description": "- The `token-hash` field can be used to revoke the token using the `/auth/v1/token/revoke` API\n- The `certificate-serial-number` and `certificate-fingerprint` fields can be used to revoke all tokens issued to that consumer/certificate using the `/auth/v1/token/revoke-all` API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "as-consumer": {
                      "type": "array",
                      "items": {}
                    },
                    "as-provider": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "consumer": {
                            "type": "string",
                            "description": "email address of consumer"
                          },
                          "token-hash": {
                            "type": "string",
                            "description": "SHA-256 of token"
                          },
                          "token-issued-at": {
                            "type": "string",
                            "description": "Time when token was issued",
                            "format": "date-time"
                          },
                          "expiry": {
                            "type": "string",
                            "description": "Time when token will expire",
                            "format": "date-time"
                          },
                          "introspected": {
                            "type": "boolean",
                            "description": "If the token was introspected"
                          },
                          "revoked": {
                            "type": "boolean",
                            "description": "If the token has been revoked"
                          },
                          "expired": {
                            "type": "boolean",
                            "description": "If the token has expired"
                          },
                          "certificate-serial-number": {
                            "type": "string",
                            "description": "Serial number of certificate of consumer"
                          },
                          "certificate-fingerprint": {
                            "type": "string",
                            "description": "Fingerprint of certificate of consumer"
                          },
                          "request": {
                            "type": "array",
                            "description": "Array of requests for the token",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The resource ID"
                                },
                                "methods": {
                                  "type": "array",
                                  "description": "Accepted methods for the resource ID",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "apis": {
                                  "type": "array",
                                  "description": "Accepted APIs for the resource ID",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "body": {
                                  "type": "object",
                                  "nullable": true
                                }
                              }
                            }
                          },
                          "geoip": {
                            "type": "object",
                            "description": "Geo properties of token obtained from IP address from which token was requested (GeoIP)",
                            "properties": {
                              "ll": {
                                "type": "array",
                                "description": "lat, long \n",
                                "items": {
                                  "type": "number"
                                }
                              },
                              "city": {
                                "type": "string"
                              },
                              "region": {
                                "type": "string"
                              },
                              "country": {
                                "type": "string"
                              },
                              "timezone": {
                                "type": "string"
                              }
                            }
                          },
                          "api-called-from": {
                            "type": "object",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "as-consumer": [
                        null
                      ],
                      "as-provider": [
                        {
                          "consumer": "bryan.robert@datakaveri.org",
                          "token-hash": "4d13b4e1142ea2453cc257f1114c0bce9acd84e599ceed545df707405991d285",
                          "token-issued-at": "2020-09-19T12:11:00.168Z",
                          "introspected": true,
                          "revoked": false,
                          "expiry": "2020-09-19T13:11:00.168Z",
                          "expired": true,
                          "certificate-serial-number": "5379c47881b51bb65c3a01da22dc175e6ec03e04",
                          "certificate-fingerprint": "a0:75:1b:72:7c:77:86:04:47:ce:25:fb:e1:ad:0c:29:db:87:16:71",
                          "request": [
                            {
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/1/*",
                              "apis": [
                                "/ngsi-ld/v1/subscription"
                              ],
                              "body": null,
                              "methods": [
                                "*"
                              ]
                            }
                          ],
                          "geoip": {
                            "ll": [
                              16.5136,
                              80.6297
                            ],
                            "city": "Vijayawada",
                            "region": "AP",
                            "country": "IN",
                            "timezone": "Asia/Kolkata"
                          },
                          "api-called-from": null
                        },
                        {
                          "consumer": "aman.asif@datakaveri.org",
                          "token-hash": "8f652451e78b68ec02e84b00abdd7ae980b5278f5b9f4ca2a88302026a5ce7c7",
                          "token-issued-at": "2020-09-17T08:29:35.012Z",
                          "introspected": false,
                          "revoked": false,
                          "expiry": "2020-09-17T09:29:35.012Z",
                          "expired": true,
                          "certificate-serial-number": "6252129ece3e5e8b5ce1238bba4ef324d6142a17",
                          "certificate-fingerprint": "bb:31:09:aa:46:e0:a1:24:dc:07:a8:87:7f:30:1b:da:f7:29:8f:07",
                          "request": [
                            {
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.com/biggroup-3/item-1",
                              "apis": [
                                "/ngsi-ld/v1/temporal/entities"
                              ],
                              "body": null,
                              "methods": [
                                "*"
                              ]
                            }
                          ],
                          "geoip": {
                            "ll": [
                              11.248,
                              75.7804
                            ],
                            "city": "Kozhikode",
                            "region": "KL",
                            "country": "IN",
                            "timezone": "Asia/Kolkata"
                          },
                          "api-called-from": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If the `hours` field is missing or invalid\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "hours missing": {
                    "value": {
                      "error": {
                        "message": "No 'hours' found in the body"
                      }
                    }
                  },
                  "hours invalid": {
                    "value": {
                      "error": {
                        "message": "'hours' must be a positive number"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Incorrect Certificate used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incorrect-Cert-Class"
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-3/provider client certificate**\n\nA Provider can use the Audit API to get details of the tokens issued for their resources. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hours": {
                    "type": "integer",
                    "maximum": 43800,
                    "description": "Number of hours for which the audit-report has to be generated",
                    "minimum": 1
                  }
                },
                "required": [
                  "hours"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "hours": 5
                  }
                }
              }
            }
          },
          "description": "`hours` determines the number of hours for which the audit report is returned"
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/provider/access": {
      "get": {
        "summary": "Get all access policies",
        "tags": [
          "Access APIs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Access ID"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address of accesser"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "consumer",
                          "onboarder",
                          "data ingester"
                        ],
                        "description": "Role of accesser"
                      },
                      "item_type": {
                        "type": "string",
                        "description": "Can be catalogue or resourcegroup",
                        "enum": [
                          "catalogue",
                          "resourcegroup"
                        ]
                      },
                      "item": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "cat_id": {
                            "type": "string"
                          }
                        }
                      },
                      "policy": {
                        "type": "string",
                        "description": "policy text in Aperture"
                      },
                      "capabilities": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "string",
                          "enum": [
                            "temporal",
                            "complex",
                            "subscription"
                          ]
                        }
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": 4,
                        "email": "test@datakaveri.org",
                        "role": "onboarder",
                        "item_type": "catalogue",
                        "item": null,
                        "policy": "test@datakaveri.org can access catalogue.iudx.io/catalogue/crud for 1 week",
                        "created": "2020-09-23T05:41:59.349Z",
                        "capabilities": null
                      },
                      {
                        "id": 430,
                        "email": "test2@datakaveri.org",
                        "role": "consumer",
                        "item_type": "resourcegroup",
                        "item": {
                          "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information"
                        },
                        "policy": "test2@datakaveri.org can access rs.iudx.io/surat-itms-realtime-information/* for 1 week if api = \"/ngsi-ld/v1/entityOperations/query\" or api = \"/ngsi-ld/v1/entities/iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information\" or api = \"/ngsi-ld/v1/entities\" or api = \"/ngsi-ld/v1/temporal/entities\" or api = \"/ngsi-ld/v1/subscription\"",
                        "created": "2020-09-29T10:36:40.704Z",
                        "capabilities": [
                          "complex",
                          "temporal",
                          "subscription"
                        ]
                      },
                      {
                        "id": 429,
                        "email": "foobar@datakaveri.org",
                        "role": "data ingester",
                        "item_type": "resourcegroup",
                        "item": {
                          "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information"
                        },
                        "policy": "foobar@datakaveri.org can access rs.iudx.io/surat-itms-realtime-information/* for 1 week if api = \"/iudx/v1/adapter\"",
                        "created": "2020-09-29T10:36:34.581Z",
                        "capabilities": null
                      },
                      {
                        "id": 431,
                        "email": "onboarder@datakaveri.org",
                        "role": "onboarder",
                        "item_type": "catalogue",
                        "item": null,
                        "policy": "onboarder@datakaveri.org can access catalogue.iudx.io/catalogue/crud for 1 week",
                        "created": "2020-09-29T10:36:45.543Z",
                        "capabilities": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "If a user who is not registered as a provider calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-auth-v1-provider-access",
        "description": "**Requires a valid IUDX issued client certificate and user must be registered provider**\n\nGet all access policies set for various users."
      },
      "post": {
        "summary": "Give users access to resources",
        "operationId": "post-auth-v1-provider-access",
        "responses": {
          "200": {
            "description": "If the access policy has been successfully set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- Missing or malformed data. Can occur for\n  - `user_email`\n  - `user_role`\n  - `item_id`\n  - `item_type`\n  - `capabilities`\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Invalid email": {
                    "value": {
                      "error": {
                        "message": "Invalid data (email)"
                      }
                    }
                  },
                  "Invalid resource id": {
                    "value": {
                      "error": {
                        "message": "Invalid data (item-id)"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If a user who is not registered as a provider calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If user to be given access is not registered for the particular `user_role`\n- If resource ID/`item_id` does not belong to provider\n- If rule exists for particular provider **AND** `user_email` **AND** `user_role` **AND** `item/catalogue` **AND** (if applicable) `capability` ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Giving access to unregistered user": {
                    "value": {
                      "error": {
                        "message": "Invalid Accesser"
                      }
                    }
                  },
                  "Resource ID does not belong to the provider": {
                    "value": {
                      "error": {
                        "message": "Provider does not match resource owner"
                      }
                    }
                  },
                  "Giving access again for same resource and same data ingester": {
                    "value": {
                      "error": {
                        "message": "Rule exists"
                      }
                    }
                  },
                  "Giving onboard access for same onboarder": {
                    "value": {
                      "error": {
                        "message": "Rule exists"
                      }
                    }
                  },
                  "Giving access again to consumer for same resource and temporal capability": {
                    "value": {
                      "error": {
                        "message": "Rule exists for temporal"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid IUDX issued client certificate and user must be registered provider**\n\nGive registered consumers, data ingesters and onboarders access to provider's resources by setting access policies.\n\n- Consumers can be given access to call specific APIs on resources\n- Onboarders can be given access to onboard resources to the catalogue on behalf of the provider\n- Data ingesters can be given access to push the provider's data to the resource server",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_email": {
                    "type": "string",
                    "format": "email",
                    "minLength": 5,
                    "maxLength": 64
                  },
                  "user_role": {
                    "type": "string",
                    "enum": [
                      "consumer",
                      "onboarder",
                      "data ingester"
                    ]
                  },
                  "item_id": {
                    "type": "string",
                    "description": "A valid full resource ID (provider_domain_email/sha1_of_provider_email)",
                    "minLength": 1,
                    "maxLength": 512
                  },
                  "item_type": {
                    "type": "string",
                    "description": "Must be resourcegroup",
                    "enum": [
                      "resourcegroup"
                    ]
                  },
                  "capabilities": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 3,
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": [
                        "subscription",
                        "temporal",
                        "complex"
                      ]
                    }
                  }
                },
                "required": [
                  "user_email",
                  "user_role"
                ]
              },
              "examples": {
                "Giving onboarder access": {
                  "value": {
                    "user_email": "test@datakaveri.org",
                    "user_role": "onboarder"
                  }
                },
                "Giving data ingester access": {
                  "value": {
                    "user_email": "test@datakaveri.org",
                    "user_role": "data ingester",
                    "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                    "item_type": "resourcegroup"
                  }
                },
                "Giving consumer access (all capabilities)": {
                  "value": {
                    "user_email": "test@datakaveri.org",
                    "user_role": "consumer",
                    "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                    "item_type": "resourcegroup",
                    "capabilities": [
                      "complex",
                      "subscription",
                      "temporal"
                    ]
                  }
                },
                "Giving consumer access (only subscription)": {
                  "value": {
                    "user_email": "test@datakaveri.org",
                    "user_role": "consumer",
                    "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-flood-sensor",
                    "item_type": "resourcegroup",
                    "capabilities": [
                      "subscription"
                    ]
                  }
                }
              }
            }
          },
          "description": "- The `item_id` field must be a valid resource ID (_provider.email.domain_/_sha1.of.provider.email_/_resource.server_/_resource.group_)\n- Currently, access can be given per resource group only, so the `item_type` field must be _resourcegroup_\n- Setting data ingester access implicitly sets a policy to access the resource with API `/iudx/v1/adapter`\n- For giving access to onboarder, `item_id` and `item_type` are not required\n- For giving access to consumers, the `capabilities` array is necessary. The `capabilities` array specifies the various APIs the consumer is allowed to call grouped by a specific capability. **Duplicates are ignored**\n\nThe valid capabilities, and the APIs they map to are:\n- `subscription` : *`/ngsi-ld/v1/subscription`*\n- `temporal` : *`/ngsi-ld/v1/temporal/entities`* , *`/ngsi-ld/v1/entities/<resource-group>`*\n- `complex` : *`/ngsi-ld/v1/entityOperations/query`* , *`/ngsi-ld/v1/entities/<resource-group>`* , *`/ngsi-ld/v1/entities`*\n\n\n"
        },
        "tags": [
          "Access APIs"
        ]
      },
      "delete": {
        "summary": "Delete access policies",
        "operationId": "delete-auth-v1-provider-access",
        "responses": {
          "200": {
            "description": "The policy/policies have been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n* Missing or malformed data. Can occur for\n  - `body` (if not an array)\n  - `id` (if missing or malformed)\n  - `capabilities` (if malformed)\n* Duplicate access IDs in request array\n**For all above errors, the offending access ID is returned if applicable**\n* SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "access_id": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid ID": {
                    "value": {
                      "error": {
                        "message": "Invalid data (id)",
                        "access_id": -5
                      }
                    }
                  },
                  "Invalid body": {
                    "value": {
                      "error": {
                        "message": "Invalid data (body)"
                      }
                    }
                  },
                  "Duplicate IDs sent": {
                    "value": {
                      "error": {
                        "message": "Duplicate data",
                        "access_id": 5
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If a user who is not registered as a provider calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid access ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "access_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Invalid id",
                        "access_id": 45
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid IUDX issued client certificate and user must be registered provider**\n\nDelete multiple access policies set by the provider.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 2147483647
                    },
                    "capabilities": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 3,
                      "uniqueItems": true,
                      "items": {
                        "type": "string",
                        "enum": [
                          "temporal",
                          "subscription",
                          "complex"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "id": 97
                    },
                    {
                      "id": 5
                    },
                    {
                      "id": 44,
                      "capabilities": [
                        "temporal"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "description": "The body is an array of JSON objects, with each object containing `id`, which is the ID of the particular access policy. The IDs can be obtained from the `GET /auth/v1/provider/access` endpoint.\n\nIn order to delete specific capabilities for consumer rules, a `capabilities` array can be sent in the object. **If the `capabilities` array is not sent for consumer rules, the whole rule will be deleted**"
        },
        "tags": [
          "Access APIs"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "NGINX-Errors": {
        "title": "SSL Errors",
        "type": "object",
        "description": "   Any certificate error will result in a `400 Bad Request` error. The following errors are possible:\n   - No client certificate sent with request for API that requires a client side certificate\n   - Error in client certificate verification. This can likely be caused by using an expired certificate to call the API\n   - Making an HTTP request to an HTTPS endpoint",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "enum": [
                  "Error occured during certificate verification. (Is your certificate expired?)",
                  "No SSL certificate sent with request",
                  "Invalid Request"
                ]
              }
            }
          }
        },
        "x-examples": {
          "No client certificate sent": {
            "error": {
              "message": "No SSL certificate sent with request"
            }
          },
          "HTTP request to HTTPS endpoint": {
            "error": {
              "message": "Invalid Request"
            }
          },
          "Client certificate error": {
            "error": {
              "message": "Error occured during certificate verification. (Is your certificate expired?)"
            }
          }
        }
      },
      "Error-Message": {
        "title": "Error-Message",
        "type": "object",
        "description": "Generic Error Message",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "Incorrect-Cert-Class": {
        "type": "object",
        "x-examples": {
          "Calling /auth/v1/token/introspect API with": {
            "error": {
              "message": "A class-1 certificate is required to call this API"
            }
          },
          "Calling /auth/v1/revoke API with consumer certificate": {
            "error": {
              "message": "A class-3 or above certificate is required to call this API"
            }
          }
        },
        "description": "If an API is called with an incorrect certificate (non IUDX or incorrect class)",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "A class-* (or above) certificate is required to call this API"
              }
            }
          }
        }
      }
    }
  }
}
{
  "openapi": "3.0.0",
  "info": {
    "title": "IUDX Auth",
    "version": "1.0",
    "description": "API specification for IUDX Auth APIs. These APIs are used by Providers and other users to manage access policies and request for tokens.\n**All Auth APIs require a valid IUDX issued client certificate.**",
    "contact": {
      "url": "https://www.iudx.org.in/"
    }
  },
  "servers": [
    {
      "url": "https://authorization.iudx.org.in",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Certificate APIs",
      "description": "Certificate related APIs"
    },
    {
      "name": "Token APIs",
      "description": "APIs related to operations on tokens"
    },
    {
      "name": "Access APIs",
      "description": "APIs related to operations on access rules/policies on resources"
    },
    {
      "name": "Delegate APIs"
    },
    {
      "name": "Session id APIs"
    },
    {
      "name": "Consumer APIs"
    }
  ],
  "paths": {
    "/auth/v1/certificate-info": {
      "post": {
        "summary": "Get user certificate details",
        "operationId": "post-auth-v1-certificate-info",
        "parameters": [],
        "description": "**Requires a valid client certificate issued by IUDX**\n\nGet details of the certificate as well as the roles of the user associated with the certificate. This API can be also used to check whether a certificate is expired, or if there is a mismatch between the private key and certificate.\n\nAny certificate error will result in a `400 Bad Request` error. The following errors are possible:\n- No client certificate sent with request for API that requires a client side certificate\n- Error in client certificate verification. This can likely be caused by using an expired certificate to call the API or if the certificate is not accepted by the AAA server\n- Making an HTTP request to an HTTPS endpoint",
        "responses": {
          "200": {
            "description": "Returns certificate details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "certificate-class": {
                      "type": "integer",
                      "description": "The certificate class"
                    },
                    "serial": {
                      "type": "string"
                    },
                    "fingerprint": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "array",
                      "description": "Roles for which the user has been registered for",
                      "items": {
                        "type": "string",
                        "enum": [
                          "provider",
                          "consumer",
                          "onboarder",
                          "data ingester"
                        ]
                      }
                    },
                    "user_name": {
                      "type": "object",
                      "description": "The name of the user associated with the certificate",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "certificate-class",
                    "serial",
                    "fingerprint",
                    "roles",
                    "user_name"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "test@iisc.ac.in",
                      "certificate-class": 3,
                      "serial": "1b5e3735d350d93918730bb7e467fd1d3350e2b8",
                      "fingerprint": "b4:5f:51:3d:35:af:cf:38:a9:98:a7:25:07:89:88:67:0e:17:13:cf",
                      "roles": [
                        "onboarder",
                        "data ingester"
                      ],
                      "user_name": {
                        "title": "Ind.",
                        "first_name": "Jane",
                        "last_name": "Doe"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NGINX-Errors"
                }
              }
            }
          }
        },
        "tags": [
          "Certificate APIs"
        ]
      }
    },
    "/auth/v1/provider/access": {
      "get": {
        "summary": "Get all access policies",
        "tags": [
          "Access APIs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "header",
            "name": "provider-email",
            "description": "Email of provider that delegate is setting rule for"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "session-id",
            "description": "the session-id that the user received on the registered phone number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "email": {
                        "type": "string",
                        "minLength": 1
                      },
                      "role": {
                        "type": "string",
                        "minLength": 1
                      },
                      "user_name": {
                        "type": "object",
                        "required": [
                          "title",
                          "first_name",
                          "last_name"
                        ],
                        "properties": {
                          "title": {
                            "type": "string",
                            "minLength": 1
                          },
                          "first_name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "last_name": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      },
                      "expiry": {
                        "type": "string",
                        "minLength": 1,
                        "description": "optional field \"YYYY-DD-MM hh:mm:ss\" in UTC \n"
                      },
                      "status": {
                        "type": "string",
                        "minLength": 1
                      },
                      "item_type": {
                        "type": "string",
                        "minLength": 1
                      },
                      "item": {
                        "type": "object",
                        "required": [
                          "cat_id"
                        ],
                        "properties": {
                          "cat_id": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      },
                      "created": {
                        "type": "string",
                        "minLength": 1
                      },
                      "capabilities": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "required": [
                      "id",
                      "email",
                      "role",
                      "user_name",
                      "status",
                      "item_type",
                      "item",
                      "created",
                      "capabilities"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": 4,
                        "email": "test@datakaveri.org",
                        "role": "onboarder",
                        "item_type": "catalogue",
                        "item": null,
                        "created": "2020-09-23T05:41:59.349Z",
                        "capabilities": null
                      },
                      {
                        "id": 430,
                        "email": "test2@datakaveri.org",
                        "role": "consumer",
                        "expiry": "2025-12-12T01:00:00.000Z",
                        "status": "active",
                        "item_type": "resourcegroup",
                        "item": {
                          "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information"
                        },
                        "created": "2020-09-29T10:36:40.704Z",
                        "capabilities": [
                          "complex",
                          "temporal",
                          "subscription"
                        ]
                      },
                      {
                        "id": 429,
                        "email": "foobar@datakaveri.org",
                        "role": "data ingester",
                        "item_type": "resourcegroup",
                        "item": {
                          "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information"
                        },
                        "created": "2020-09-29T10:36:34.581Z",
                        "capabilities": null
                      },
                      {
                        "id": 431,
                        "email": "onboarder@datakaveri.org",
                        "role": "onboarder",
                        "item_type": "catalogue",
                        "item": null,
                        "expiry": "2025-12-12T01:00:00.000Z",
                        "status": "active",
                        "created": "2020-09-29T10:36:45.543Z",
                        "capabilities": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the `provider-email` header is malformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Invalid data (provider_email)"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "- If a user who is not registered as a provider or delegate calls the API\n- If `provider-email` is not a registered provider\n- If a delegate who is not authorized by the provider in the `provider-email` header calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "if the header 'session-id' is:\n  - Not present\n  - Invalid\n  - null or empty",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-auth-v1-provider-access",
        "description": "**Requires a valid IUDX issued client certificate and user must be registered provider OR user must be a registered delegate and have a delegate policy set by the provider for them**\n\nGet all access policies set for various users.\n\n### Provider delegates\n\nOnce a delegate has been assigned, a delegate may view policies set by the provider and other delegates. When doing this, the request must include the **provider-email** header field, that contains the email of the provider for which the rule is to be set."
      },
      "post": {
        "summary": "Give users access to resources",
        "operationId": "post-auth-v1-provider-access",
        "responses": {
          "200": {
            "description": "If the access policy/policies have been successfully set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- Missing or malformed data. Can occur for\n  - `body` (if not an array)\n  - `user_email`\n  - `user_role`\n  - `item_id`\n  - `item_type`\n  - `capabilities`\n  - `expiry_time`\n  - `provider-email` header\n**The index (from 0) of the object in the request array containing the error (except for `provider-email` header and `body`) will be returned in the error response**\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer",
                              "description": "ID of the object containing the error"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid email": {
                    "value": {
                      "error": {
                        "message": "Invalid data (email)",
                        "id": 2
                      }
                    }
                  },
                  "Invalid resource id": {
                    "value": {
                      "error": {
                        "message": "Invalid data (item-id)",
                        "id": 4
                      }
                    }
                  },
                  "Duplicate data": {
                    "value": {
                      "error": {
                        "message": "Invalid data (duplicate)",
                        "id": 7
                      }
                    }
                  },
                  "Invalid expiry": {
                    "value": {
                      "error": {
                        "message": "Invalid data (expiry)",
                        "id": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "- If a user who is not registered as a provider or delegate calls the API\n- If `provider-email` is not a registered provider\n- If a delegate who is not authorized by the provider in the `provider-email` header calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the header 'session-id' is missing/empty/invalid\n- If user to be given access is not registered for the particular `user_role`\n- If resource ID/`item_id` does not belong to provider\n- If rule exists for particular provider **AND** `user_email` **AND** `user_role` **AND** `item/catalogue` **AND** (if applicable) `capability`\n- Delegate tries to set a delegate rule\n\n**The index from 0 of the offending object in the request array is also returned in the error message**\n",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "minLength": 1
                        },
                        "id": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "examples": {
                  "Giving access to unregistered user": {
                    "value": {
                      "error": {
                        "message": "Invalid Accesser",
                        "id": 0
                      }
                    }
                  },
                  "Resource ID does not belong to the provider": {
                    "value": {
                      "error": {
                        "message": "Provider does not match resource owner",
                        "id": 8
                      }
                    }
                  },
                  "Giving access again for same resource and same data ingester": {
                    "value": {
                      "error": {
                        "message": "Rule exists",
                        "id": 2
                      }
                    }
                  },
                  "Giving onboard access for same onboarder": {
                    "value": {
                      "error": {
                        "message": "Rule exists",
                        "id": 1
                      }
                    }
                  },
                  "Giving access again to consumer for same resource and temporal, complex capability": {
                    "value": {
                      "error": {
                        "message": "Rule exists for temporal,complex",
                        "id": 0
                      }
                    }
                  },
                  "Delegate setting a delegate rule": {
                    "value": {
                      "error": {
                        "message": "Delegate cannot set delegate rule",
                        "id": 4
                      }
                    }
                  },
                  "empty/missing Session-id": {
                    "value": {
                      "error": {
                        "message": "SessionID not present"
                      }
                    }
                  },
                  "Invalid session-id": {
                    "value": {
                      "error": {
                        "message": "Invalid SessionID"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid IUDX issued client certificate and user must be a registered provider OR user must be a registered delegate and have a delegate policy set by the provider for them**\n\nGive registered consumers, data ingesters, onboarders and delegates access to provider's resources by setting access policies.\n\n- Consumers can be given access to call specific APIs on resources\n- Onboarders can be given access to onboard resources to the catalogue on behalf of the provider\n- Data ingesters can be given access to push the provider's data to the resource server\n- Delegates can create rules on behalf of the provider\n\n### Provider delegates\n\nOnce a delegate has been authorized by a provider, a delegate may set policies on behalf of the provider. When doing this, the request must include the **provider-email** header field, that contains the email of the provider for which the rule is to be set.\n\n- Delegates can create new policies and modify existing policies (adding capabilities)\n- **Delegates cannot set delegate policies**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "user_email": {
                      "type": "string",
                      "minLength": 1,
                      "format": "email"
                    },
                    "user_role": {
                      "type": "string",
                      "minLength": 1,
                      "enum": [
                        "consumer",
                        "onboarder",
                        "data ingester",
                        "delegate"
                      ]
                    },
                    "item_type": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Must be resourcegroup",
                      "enum": [
                        "resourcegroup"
                      ]
                    },
                    "capabilities": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "maxItems": 3,
                      "description": "Required for consumer rules",
                      "items": {
                        "type": "string",
                        "enum": [
                          "subscription",
                          "temporal",
                          "complex"
                        ]
                      }
                    },
                    "item_id": {
                      "type": "string",
                      "description": "A valid full resource ID (provider_domain_emai/sha1_of_provider_email)"
                    }
                  },
                  "required": [
                    "user_email",
                    "user_role"
                  ]
                }
              },
              "examples": {
                "Giving onboarder access": {
                  "value": [
                    {
                      "user_email": "test@datakaveri.org",
                      "user_role": "onboarder"
                    }
                  ]
                },
                "Giving data ingester access": {
                  "value": [
                    {
                      "user_email": "test@datakaveri.org",
                      "user_role": "data ingester",
                      "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                      "item_type": "resourcegroup"
                    }
                  ]
                },
                "Giving multiple consumers access": {
                  "value": [
                    {
                      "user_email": "test@datakaveri.org",
                      "user_role": "consumer",
                      "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                      "item_type": "resourcegroup",
                      "capabilities": [
                        "complex",
                        "subscription",
                        "temporal"
                      ]
                    },
                    {
                      "user_email": "admin@datakaveri.org",
                      "user_role": "consumer",
                      "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                      "item_type": "resourcegroup",
                      "capabilities": [
                        "complex",
                        "subscription"
                      ]
                    }
                  ]
                },
                "Giving consumer access (only subscription)": {
                  "value": [
                    {
                      "user_email": "test@datakaveri.org",
                      "user_role": "consumer",
                      "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-flood-sensor",
                      "item_type": "resourcegroup",
                      "capabilities": [
                        "subscription"
                      ]
                    }
                  ]
                },
                "Give delegate access": {
                  "value": [
                    {
                      "user_email": "delegate@example.com",
                      "user_role": "delegate"
                    }
                  ]
                },
                "Setting expiry time with consumer policy": {
                  "value": [
                    {
                      "user_email": "test@datakaveri.org",
                      "user_role": "consumer",
                      "item_id": "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-flood-sensor",
                      "item_type": "resourcegroup",
                      "capabilities": [
                        "subscription"
                      ],
                      "expiry_time": "2021-03-18T09:00:00Z"
                    }
                  ]
                }
              }
            }
          },
          "description": "The request body is an array of objects, with each object being a rule to be set.\n\n- The `item_id` field must be a valid resource ID (_provider.email.domain_/_sha1.of.provider.email_/_resource.server_/_resource.group_)\n- Currently, access can be given per resource group only, so the `item_type` field must be _resourcegroup_\n- Setting data ingester access implicitly sets a policy to access the resource with API `/iudx/v1/adapter`\n- For giving access to onboarder and delegate, `item_id` and `item_type` are not required\n- For giving access to consumers, the `capabilities` array is necessary. The `capabilities` array specifies the various APIs the consumer is allowed to call grouped by a specific capability. \n-`expiry_time` is an optional field that specifies the expiry of the policy. It is to be sent in UTC in the ISO_8601 format. If 'expiry_time' is not sent a default time of 1 year is set\n\nThe valid capabilities, and the APIs they map to are:\n- `subscription` : *`/ngsi-ld/v1/subscription`*\n- `temporal` : *`/ngsi-ld/v1/temporal/entities`* , *`/ngsi-ld/v1/entities/<resource-group>`*\n- `complex` : *`/ngsi-ld/v1/entityOperations/query`* , *`/ngsi-ld/v1/entities/<resource-group>`* , *`/ngsi-ld/v1/entities`*\n\n**NOTE** : Rules are set only when **all objects in the request array are valid**"
        },
        "tags": [
          "Access APIs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "header",
            "name": "provider-email",
            "description": "Email of provider that delegate is setting rule for"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "session-id",
            "description": "the session-id that the user received on the registered phone number"
          }
        ]
      },
      "delete": {
        "summary": "Delete access policies",
        "operationId": "delete-auth-v1-provider-access",
        "responses": {
          "200": {
            "description": "The policy/policies have been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n* Missing or malformed data. Can occur for\n  - `body` (if not an array)\n  - `id` (if missing or malformed)\n  - `capabilities` (if malformed)\n* Duplicate access IDs in request array\n - `provider-email` header\n\n**For all above errors (except for `provider-email` header) the offending access ID is returned will be returned in the error response**\n* SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "access_id": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid ID": {
                    "value": {
                      "error": {
                        "message": "Invalid data (id)",
                        "access_id": -5
                      }
                    }
                  },
                  "Invalid body": {
                    "value": {
                      "error": {
                        "message": "Invalid data (body)"
                      }
                    }
                  },
                  "Duplicate IDs sent": {
                    "value": {
                      "error": {
                        "message": "Duplicate data",
                        "access_id": 5
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "- If a user who is not registered as a provider or delegate calls the API\n- If `provider-email` is not a registered provider\n- If a delegate who is not authorized by the provider in the `provider-email` header calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the header 'session-id' is missing/empty/invalid\n- Invalid access ID\n- Delegate tries to delete a delegate rule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "access_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Invalid access ID": {
                    "value": {
                      "error": {
                        "message": "Invalid id",
                        "access_id": 45
                      }
                    }
                  },
                  "Delegate trying to delete a delegate rule": {
                    "value": {
                      "error": {
                        "message": "Delegate cannot delete delegate rules",
                        "access_id": 8
                      }
                    }
                  },
                  "example-3": {
                    "value": {
                      "error": {
                        "message": "string",
                        "access_id": 0
                      }
                    }
                  },
                  "session id invalid": {
                    "value": {
                      "error": {
                        "message": "Invalid SessionID"
                      }
                    }
                  },
                  "session id missiong/empty": {
                    "value": {
                      "error": {
                        "message": "SessionID not present"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid IUDX issued client certificate and user must be a registered provider OR user must be a registered delegate and have a delegate policy set by the provider for them**\n\nDelete multiple access policies set by the provider or delegates.\n\n### Provider delegates\n\nOnce a delegate has been authorized by a provider, a delegate may delete policies on behalf of the provider. When doing this, the request must include the **provider-email** header field, that contains the email of the provider for which the rule is to be set.\n\n- Delegates can delete policies and modify existing policies (delete capabilities)\n- **Delegates cannot delete delegate policies**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "capabilities": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 3,
                      "items": {
                        "type": "string",
                        "enum": [
                          "subscription",
                          "temporal",
                          "complex"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "id": 97
                    },
                    {
                      "id": 5
                    },
                    {
                      "id": 44,
                      "capabilities": [
                        "temporal"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "description": "The body is an array of JSON objects, with each object containing `id`, which is the ID of the particular access policy. The IDs can be obtained from the `GET /auth/v1/provider/access` endpoint. \n\nIn order to delete specific capabilities for consumer rules, a `capabilities` array can be sent in the object. **If the `capabilities` array is not sent for consumer rules, the whole rule will be deleted**\n\n**NOTE** : Rules are deleted only when **all objects in the request array are valid**"
        },
        "tags": [
          "Access APIs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "header",
            "name": "provider-email",
            "description": "Email of provider that delegate is setting rule for"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "the session-id that the user received on the registered phone number",
            "name": "session-id"
          }
        ]
      },
      "put": {
        "summary": "Update policy expiry time",
        "operationId": "put-auth-v1-provider-access",
        "responses": {
          "200": {
            "description": "The policies have been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                },
                "examples": {
                  "success": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n* Missing or malformed data. Can occur for\n  - `body` (if not an array)\n  - `id` (if missing or malformed)\n  - `expiry_time` (if malformed)\n\n**For all above errors the offending access ID is returned will be returned in the error response**\n* SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "minLength": 1
                        },
                        "access_id": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "message",
                        "access_id"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "examples": {
                  "Invalid id": {
                    "value": {
                      "error": {
                        "message": "Invalid data (id)",
                        "access_id": -5
                      }
                    }
                  },
                  "Invalid time": {
                    "value": {
                      "error": {
                        "message": "Invalid data (expiry)",
                        "access_id": 10
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "- If a user who is not registered as a provider or delegate calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the header 'session-id' is missing/empty/invalid\n- Invalid access ID\n- Delegate tries to update a delegate rule",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "minLength": 1
                        },
                        "access_id": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "message",
                        "access_id"
                      ]
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "examples": {
                  "Invalid id": {
                    "value": {
                      "error": {
                        "message": "Invalid id",
                        "access_id": 45
                      }
                    }
                  },
                  "delegate updating delegate rule": {
                    "value": {
                      "error": {
                        "message": "Delegate cannot update delegate rules",
                        "access_id": 8
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid IUDX issued client certificate and user must be a registered provider OR user must be a registered delegate and have a delegate policy set by the provider for them**\n\nUpdate multiple access policies set by the provider or delegates.\n\n### Provider delegates\n\nOnce a delegate has been authorized by a provider, a delegate may update policies on behalf of the provider. When doing this, the request must include the **provider-email** header field, that contains the email of the provider for which the rule is to be set.\n\n- Delegates can update policies \n- **Delegates cannot update delegate policies**",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "session-id",
            "description": "the session-id that the user received on the registered phone number"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "provider-email",
            "description": "Email of provider that delegate is setting rule for"
          }
        ],
        "tags": [
          "Access APIs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "expiry_time": {
                      "type": "string",
                      "minLength": 1,
                      "description": "DateTime in ISO_8601 format in UTC time"
                    }
                  },
                  "required": [
                    "id",
                    "expiry_time"
                  ]
                }
              },
              "examples": {
                "success": {
                  "value": [
                    {
                      "id": 1738,
                      "expiry_time": "2021-03-18T09:00:00Z"
                    }
                  ]
                },
                "Multiple request": {
                  "value": [
                    {
                      "id": 4321,
                      "expiry_time": "2021-03-18T09:00:00Z"
                    },
                    {
                      "id": 1234,
                      "expiry_time": "2021-03-18T09:00:00Z"
                    }
                  ]
                }
              }
            }
          },
          "description": "\nThe body is an array of JSON objects, with each object containing :\n-`id` (a mandotary field), which is the ID of the particular access policy. The IDs can be obtained from the `GET /auth/v1/provider/access` endpoint and,\n-`expiry_time` is an optional field that specifies the expiry of the policy. It is to be sent in UTC in the ISO_8601 format. If the value of `expiry_time` is not sent, a default of 1 year is set\n\n\n**Policies can only be updated(renewed) only when they have already expired.**\n\n\n**NOTE** : Rules are updated only when **all objects in the request array are valid**"
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "session-id",
            "description": "the session-id that the user received on the registered phone number"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "provider-email",
            "description": "Email of provider that delegate is setting rule for"
          }
        ]
      }
    },
    "/auth/v1/delegate/providers": {
      "get": {
        "summary": "Delegate - Get all Providers who have given delegate access",
        "tags": [
          "Delegate APIs"
        ],
        "responses": {
          "200": {
            "description": "The Delegate has been given access by at least one Provider. The details of the Providers will be returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "minLength": 1
                      },
                      "first_name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "last_name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "email": {
                        "type": "string",
                        "minLength": 1,
                        "format": "email"
                      },
                      "organization": {
                        "type": "object",
                        "required": [
                          "name",
                          "website",
                          "city",
                          "state",
                          "country"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "website": {
                            "type": "string",
                            "minLength": 1
                          },
                          "city": {
                            "type": "string",
                            "minLength": 1
                          },
                          "state": {
                            "type": "string",
                            "minLength": 1
                          },
                          "country": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "required": [
                      "title",
                      "first_name",
                      "last_name",
                      "email",
                      "organization"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "title": "Mr.",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john.doe@acme.org",
                        "organization": {
                          "name": "ACME",
                          "website": "acme.org",
                          "city": "Bengaluru",
                          "state": "KA",
                          "country": "IN"
                        }
                      },
                      {
                        "title": "Ms.",
                        "first_name": "Jane",
                        "last_name": "Doe",
                        "email": "jane.doe@company.in",
                        "organization": {
                          "name": "Company",
                          "website": "company.in",
                          "city": "Bengaluru",
                          "state": "KA",
                          "country": "IN"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "If a user who is not registered as a delegate calls the API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If no Providers have given access to the Delegate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not approved by any providers"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-auth-v1-delegate-providers",
        "description": "**Requires a valid IUDX issued client certificate and user must be a registered delegate**\n\nA registered Delegate can get details of all Providers who have set a delegate rule for said Delegate"
      }
    },
    "/auth/v1/get-session-id": {
      "post": {
        "summary": "",
        "operationId": "post-auth-v1-get-session-id",
        "responses": {
          "200": {
            "description": "Success in case all validations pass, the sms is sent successfully, and the details are stored in the DB. the confirmation of the otp being sent and the validity of the sessionId is returned.\nThe sessionId is also sent to the phone number of the user, the user must add it to the headers of request to the particular secure endpoint/method combination",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Validity": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "Validity"
                  ]
                },
                "examples": {
                  "success": {
                    "value": {
                      "success": true,
                      "message": "Session id sent to mobile no",
                      "Validity": "2021-02-24T05:30:24.641Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request in case the request is not in the expected format or the method-endpoint combination is not a secured endpoint or the particular method-endpoint combination is inaccessible to the userrole of the user trying to call the get-session-id endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "\"apis missing\"": {
                    "value": {
                      "error": {
                        "message": "Invalid data (apis)"
                      }
                    }
                  },
                  "missing method/endpoint": {
                    "value": {
                      "error": {
                        "message": "Invalid data (apis)"
                      }
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "description": "",
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Session id APIs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "apis": {
                    "type": "array",
                    "uniqueItems": true,
                    "minItems": 1,
                    "description": "JSON array object containing multiple requests\n",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "minLength": 1
                        },
                        "endpoint": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "method",
                        "endpoint"
                      ]
                    }
                  }
                },
                "required": [
                  "apis"
                ]
              },
              "examples": {
                "Multiple Endpoint request": {
                  "value": {
                    "apis": [
                      {
                        "method": "string",
                        "endpoint": "string"
                      },
                      {
                        "method": "string1",
                        "endpoint": "string1"
                      }
                    ]
                  }
                },
                "single endpoint request": {
                  "value": {
                    "apis": [
                      {
                        "method": "string",
                        "endpoint": "string"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "An object 'apis' which contains an array of objects containing keywords 'endpoint' (describing the endpoint the user wants session id to be valid for) and 'method' (describing what method the endpoint will be hit with)."
        },
        "description": "Requires a valid IUDX issued client certificate and user must be a registered user whose role must have access to the secured-endpoints/methods combinations that they are trying to get a session-id for."
      }
    },
    "/auth/v1/token": {
      "get": {
        "summary": "View details of issued tokens",
        "operationId": "get-auth-v1-token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "minLength": 1
                      },
                      "status": {
                        "type": "string",
                        "minLength": 1,
                        "enum": [
                          "active",
                          "deleted"
                        ],
                        "description": "If the token is active or has been deleted by user"
                      },
                      "expiry": {
                        "type": "string",
                        "minLength": 1
                      },
                      "created_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "updated_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "request": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "minLength": 1,
                              "enum": [
                                "active",
                                "expired",
                                "deleted",
                                "revoked"
                              ],
                              "description": "status of access to resource"
                            },
                            "created_at": {
                              "type": "string",
                              "minLength": 1
                            },
                            "updated_at": {
                              "type": "string",
                              "minLength": 1
                            },
                            "cat_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "status",
                            "created_at",
                            "updated_at",
                            "cat_id"
                          ]
                        }
                      }
                    },
                    "required": [
                      "uuid",
                      "status",
                      "expiry",
                      "created_at",
                      "updated_at",
                      "request"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "uuid": "f3b67255-9315-4fb2-a83c-5dfbf3ea0c0e",
                        "status": "active",
                        "expiry": "2021-03-05T06:37:08.836Z",
                        "created_at": "2021-02-26T06:37:08.836Z",
                        "updated_at": "2021-02-26T06:37:08.836Z",
                        "request": [
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/*",
                            "created_at": "2021-02-26T06:37:08.836Z",
                            "updated_at": "2021-02-26T06:37:08.836Z"
                          },
                          {
                            "status": "deleted",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/hello/one",
                            "created_at": "2021-02-26T06:37:08.876Z",
                            "updated_at": "2021-02-26T06:37:08.876Z"
                          }
                        ]
                      },
                      {
                        "uuid": "3cc80744-878b-405e-bb1e-54cd42d9fca7",
                        "status": "active",
                        "expiry": "2021-03-05T06:58:36.386Z",
                        "created_at": "2021-02-26T06:58:36.386Z",
                        "updated_at": "2021-02-26T06:58:36.386Z",
                        "request": [
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/*",
                            "created_at": "2021-02-26T06:58:36.399Z",
                            "updated_at": "2021-02-26T06:58:36.399Z"
                          },
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/hello/one",
                            "created_at": "2021-02-26T06:58:36.402Z",
                            "updated_at": "2021-02-26T06:58:36.402Z"
                          }
                        ]
                      },
                      {
                        "uuid": "4350228e-539d-4715-898a-66edf6cd2b19",
                        "status": "active",
                        "expiry": "2021-03-05T07:05:49.397Z",
                        "created_at": "2021-02-26T07:05:49.397Z",
                        "updated_at": "2021-02-26T07:05:49.397Z",
                        "request": [
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/catalogue.iudx.io/catalogue/crud",
                            "created_at": "2021-02-26T07:05:49.401Z",
                            "updated_at": "2021-02-26T07:05:49.401Z"
                          }
                        ]
                      },
                      {
                        "uuid": "0cbf0dd2-4e67-424b-9667-61eacd3f6833",
                        "status": "active",
                        "expiry": "2021-03-06T10:32:14.398Z",
                        "created_at": "2021-02-27T10:32:14.398Z",
                        "updated_at": "2021-02-27T10:32:14.398Z",
                        "request": [
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/*",
                            "created_at": "2021-02-27T10:32:14.403Z",
                            "updated_at": "2021-02-27T10:32:14.403Z",
                            "apis": [
                              "/ngsi-ld/v1/subscription",
                              "/ngsi-ld/v1/entityOperations/query",
                              "/ngsi-ld/v1/entities/iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group",
                              "/ngsi-ld/v1/entities",
                              "/ngsi-ld/v1/temporal/entities"
                            ]
                          },
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1/*",
                            "created_at": "2021-02-27T10:32:14.407Z",
                            "updated_at": "2021-02-27T10:32:14.407Z"
                          }
                        ]
                      },
                      {
                        "uuid": "9e75ba61-f38c-4031-aef1-12fba16f640d",
                        "status": "active",
                        "expiry": "2021-03-06T10:34:20.627Z",
                        "created_at": "2021-02-27T10:34:20.627Z",
                        "updated_at": "2021-02-27T10:34:20.627Z",
                        "request": [
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1/*",
                            "created_at": "2021-02-27T10:34:20.667Z",
                            "updated_at": "2021-02-27T10:34:20.667Z"
                          },
                          {
                            "status": "active",
                            "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1/*",
                            "created_at": "2021-02-27T10:34:20.672Z",
                            "updated_at": "2021-02-27T10:34:20.672Z"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NGINX-Errors"
                }
              }
            }
          },
          "401": {
            "description": "If the user calling the API is not a registered consumer/onboarder/data ingester",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX and is a registered consumer/onboarder/data ingester**\n\nView issued tokens, status of tokens and associated resources along with the status of resources. \n\nThe token can have 2 states:\n- `active`\n- `expired`\n\n**Deleted tokens are not included in the response**\n\nThe `uuid` field is used in the `DELETE /token` and `PUT /token` APIs to delete and update tokens respectively.\n\n## Resource status\n`status` in the `request` object refers to the status of the resource. It can can have 4 states:\n\n- `active` - if user has access to the resource\n- `deleted` - if user has deleted said resource from the token\n- `revoked` - if the provider has revoked consumer access to the resource\n- `expired` - if the policy for the resource has expired\n\nResources in the `revoked`, `deleted` and `expired` are not accessible to the user.",
        "tags": [
          "Token APIs"
        ]
      },
      "post": {
        "summary": "Request for a token/Reissue expired token",
        "operationId": "post-auth-v1-token",
        "responses": {
          "200": {
            "description": "The user has access to all requested resources and the token is generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "minLength": 1
                    },
                    "expiry": {
                      "type": "string",
                      "minLength": 1,
                      "description": "expiry time in UTC"
                    }
                  },
                  "required": [
                    "token",
                    "expiry"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "token": "authorization.iudx.org.in/jane.doe@datakaveri.org/7d70524fdb53988c2b3411686256bf5d/38bd720c-fcaf-4ae7-9b1c-28d2a30ba1f9",
                      "expiry": "2021-03-10T12:33:07.740Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- Empty body\n- If both `existing_token` and `request` is sent\n- If `request` is malformed\n  - If resource IDs are invalid/malformed\n  - If duplicate resource IDs present\n  - If resources from different resource servers are present\n- If UUID sent for `existing_token` is invalid/malformed\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "//": {
                          "type": "string"
                        },
                        "error": {
                          "type": "object",
                          "required": [
                            "message"
                          ],
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": [
                        "error"
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Invalid resource ID": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "resource ID contains unsafe characters",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/test*"
                      }
                    }
                  },
                  "Duplicate IDs": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Duplicate resource",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/test"
                      }
                    }
                  },
                  "Resources from different resource servers": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "All resources must belong to same resource server",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.org.com/test"
                      }
                    }
                  },
                  "Invalid UUID for existing_token": {
                    "value": {
                      "error": {
                        "message": "Invalid 'existing_token' uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user calling the API is not a registered consumer/onboarder/data ingester",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the user is unauthorized to access a particular resource\n- If no policies have been set for a particular resource\n- If the `existing_token` does not exist or is not expired\n- If the `existing_token` no longer has access to any resources (resources deleted/access revoked by provider/access expired)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "//": {
                      "type": "string"
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "invalid-input": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "existing_token not expired": {
                    "value": {
                      "error": {
                        "message": "'existing_token' not expired"
                      }
                    }
                  },
                  "existing_token does not exist": {
                    "value": {
                      "error": {
                        "message": "Invalid 'existing_token'"
                      }
                    }
                  },
                  "No policies for a resource": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid 'id'; no access control policies have been set for this 'id' by the data provider",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group7"
                      }
                    }
                  },
                  "Unauthorized": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Unauthorized",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/test"
                      }
                    }
                  },
                  "existing_token has no access to resources": {
                    "value": {
                      "error": {
                        "message": "Token has no access to resources"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX and is a registered consumer/onboarder/data ingester**\n\nGet a token **OR** using an expired token, get a new token with all the same resources as the expired one.\n\nIf the user has access to the resources, a token will be generated with a validity of **1 week**. The token structure is as follows:\n\n```<Authorization server URL>/<email of the requesting user>/<32 chars of random characters in hex>/<uuid>```\n\nThe UUID of the token serves as the ID of the token. The `PUT /token` and `DELETE /token` APIs make use of the UUID to identify the token.\n\n### Token Validity\n\nAs mentioned earlier, a token is valid for 1 week. However, note that **policies also have an expiry that is set by the Provider, or the Provider may delete the policy associated with the resource**. Hence, a token may be valid, but the resources associated with the token would no longer be accessible. You may use the `GET /token` API to determine the status of the resources associated with the token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "request": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "existing_token": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Token Request": {
                  "value": {
                    "request": [
                      "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-aqm",
                      "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-buses/item-1",
                      "datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.org.in/pune-streelight/item-2"
                    ]
                  }
                },
                "Existing token request": {
                  "value": {
                    "existing_token": "424e3ec9-7b09-4362-a22c-67bbc61d00b9"
                  }
                }
              }
            }
          },
          "description": "- `request` is an array with resources ID for which access is desired.\n  - The resources can be resource item IDs or resource group IDs\n  - **All resources must belong to the same resource server**\n- `existing_token` is a valid expired token UUID belonging to the user.\n\n**Either `request` or `existing_token` must form part of the request body, not both**"
        },
        "tags": [
          "Token APIs"
        ]
      },
      "parameters": [],
      "delete": {
        "summary": "Delete tokens",
        "operationId": "delete-auth-v1-token",
        "responses": {
          "200": {
            "description": "The sent tokens have been deleted successfully ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Generic-Success"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- if token UUIDs are invalid/malformed\n- if UUIDs are of tokens that are non-existent, expired or already deleted\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/Error-Message"
                    }
                  ]
                },
                "examples": {
                  "UUIDs of tokens that are expired/already deleted/non-existent": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid uuids",
                        "invalid-input": [
                          "44f3bf25-63eb-4ab8-84c3-ca1882ed02ef",
                          "5910eb19-5b8a-432b-9865-dca4cbf69b78"
                        ]
                      }
                    }
                  },
                  "Invalid UUID": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid data (uuid)",
                        "invalid-input": [
                          "5910eb19-5b8a-432b-9865-xca4cbf69b78"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user calling the API is not a registered consumer/onboarder/data ingester",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX and is a registered consumer/onboarder/data ingester**\n\nDelete a list of tokens. **Expired tokens cannot be deleted.** Once tokens are deleted, they cannot be introspected and are hence invalid. Deleted tokens also cannot be used for the `existing-token` option in the `POST /token` API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "tokens"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "tokens": [
                      "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    ]
                  }
                }
              }
            }
          },
          "description": "The request is an object with `tokens`, an array of token UUIDs"
        },
        "tags": [
          "Token APIs"
        ]
      },
      "put": {
        "summary": "Update resources associated with tokens",
        "operationId": "put-auth-v1-token",
        "responses": {
          "200": {
            "description": "An array of objects is returned with each object representing the token that has been affected\n- `active_resources` are all the resources currently active for the token\n- `deleted_resources` are all resources that have **now** been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string",
                        "minLength": 1
                      },
                      "active_resources": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "deleted_resources": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "token",
                      "active_resources",
                      "deleted_resources"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "token": "a1997488-6c50-4ce2-b3e2-0812f72e59fc",
                        "active_resources": [
                          "datakaveri.org/f8dc5bbb151968101ad4596819a248d3e0ea20c0/rs.iudx.io/pune-env-flood/*",
                          "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/*"
                        ],
                        "deleted_resources": []
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "- if `request` is invalid or malformed\n- if the `token` UUID is malformed or is duplicated\n- if the `resources` array is invalid or malformed\n- if there are duplicated or invalid resources in `resources` array\n- if there are non-existent, deleted or expired token UUIDs\n- if new resources do not belong to same resource server\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "//": {
                          "type": "string"
                        },
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Invalid resource ID": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "resource ID contains unsafe characters",
                        "invalid-input": "datakaveri.org/f8dc5bbb151968101ad4596819a248d3e0ea20c0/rs.iudx.io/pune-env-flood/*"
                      }
                    }
                  },
                  "Different resource server in request": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "All resources must belong to same resource server",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/res-group"
                      }
                    }
                  },
                  "Non existent/expired/deleted token UUIDs": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid uuids",
                        "invalid-input": [
                          "fa404de7-89e6-41ed-b880-d90c80734af7",
                          "5bc4c89f-37df-4873-b70f-b16b5bef7119"
                        ]
                      }
                    }
                  },
                  "Duplicate resources": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Duplicate resource",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the user calling the API is not a registered consumer/onboarder/data ingester",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- if requesting for an unauthorised resource\n- if no policies have been set for a particular resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "//": {
                      "type": "string"
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "invalid-input": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "No policies set for resource": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid 'id'; no access control policies have been set for this 'id' by the data provider",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/test"
                      }
                    }
                  },
                  "Unauthorized to access the resource": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Unauthorized",
                        "invalid-input": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/test"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX and is a registered consumer/onboarder/data ingester**\n\nUpdate resources associated with a token. The list of resources sent along with the request for a particular token **is the list of resources that will be set as active for that token. All other resources for said token will be deleted.**\n\n- To add resources to a token, the existing resources of the token must be sent along with the additional resources. The new resources must belong to the same resource server as the existing resources.\n- To delete existing resources, those resources must not be sent as part of the request\n\n**NOTE**: When adding resources, if access to existing resources has been revoked by provider or has expired (resource status `revoked` or `expired`), sending these resources as part of the request may result in a `403 Forbidden` error. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        },
                        "resources": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "request": [
                      {
                        "token": "a1997488-6c50-4ce2-b3e2-0812f72e59fc",
                        "resources": [
                          "datakaveri.org/f8dc5bbb151968101ad4596819a248d3e0ea20c0/rs.iudx.io/pune-env-flood/*",
                          "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group/*"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "`request` is an array of objects, with each object containing `token` UUID and `resources` array to be set for the token.\n\n- `resources` cannot be empty i.e. there must be at least one resource to be added\n- resource IDs in `resources` array can be either resource group IDs or resource item IDs (same as `POST /token` `request`)"
        },
        "tags": [
          "Token APIs"
        ]
      }
    },
    "/auth/v1/token/introspect": {
      "post": {
        "summary": "Introspect token",
        "operationId": "post-auth-v1-token-introspect",
        "responses": {
          "200": {
            "description": "The token is valid. The response contains details of the resources that the token permits access to, along with the APIs for each.\n\n**NOTE**: For resource groups, resource IDs are appended with `/*` ",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "consumer": {
                      "type": "string",
                      "minLength": 1
                    },
                    "expiry": {
                      "type": "string",
                      "minLength": 1
                    },
                    "request": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1
                          },
                          "apis": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "id"
                        ]
                      }
                    }
                  },
                  "required": [
                    "consumer",
                    "expiry",
                    "request"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "consumer": "jane.doe@datakaveri.org",
                      "expiry": "2021-03-11T08:40:10.136Z",
                      "request": [
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/test/*",
                          "apis": [
                            "/ngsi-ld/v1/subscription"
                          ]
                        },
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/test-group/item-1",
                          "apis": [
                            "/iudx/v1/adapter"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- Invalid/malformed token\n- No token in body\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Invalid token": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- Expired/deleted token\n- Non existent token\n- Resource server not permitted to introspect the token\n- If access to resources associated with token are expired/revoked\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Expired/deleted token OR non existent token OR Resource server not permitted to introspect the token": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  },
                  "If access to resources associated with token are expired/revoked": {
                    "value": {
                      "error": {
                        "message": "Token has no access to resources"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-1 client certificate issued by IUDX OR a valid certificate issued by a trusted CA (e.g. Let's Encrypt). The certificate must contain the hostname of the resource server**\n\nIntrospect a token. This API is called by resource servers to determine the resources the token permits access to, along with APIs for each.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "token": "auth.iudx.org.in/jane.doe@datakaveri.org/b2c8cb96c665a3f9de1a5d7a768e326b/720a4d55-a377-464c-bc8f-e0984eaba192"
                  }
                }
              }
            }
          },
          "description": "The request body contains the token to be introspected"
        },
        "tags": [
          "Token APIs"
        ]
      },
      "parameters": []
    },
    "/auth/v1/consumer/resources": {
      "get": {
        "summary": "Allow consumers to see resources they have access to",
        "operationId": "get-auth-v1-consumer-resource",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "cat_id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "capabilities": {
                        "type": "array",
                        "description": "The valid capabilities for the resource",
                        "items": {
                          "type": "string"
                        }
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of resource",
                        "enum": [
                          "resourcegroup"
                        ],
                        "readOnly": true
                      }
                    },
                    "required": [
                      "cat_id",
                      "capabilities"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information",
                        "capabilities": [
                          "complex",
                          "subscription",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-info",
                        "capabilities": [
                          "complex",
                          "subscription",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms",
                        "capabilities": [
                          "complex",
                          "subscription",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-",
                        "capabilities": [
                          "complex",
                          "subscription",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/integration-test",
                        "capabilities": [
                          "complex",
                          "subscription",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group",
                        "capabilities": [
                          "subscription",
                          "complex",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1",
                        "capabilities": [
                          "subscription",
                          "complex",
                          "temporal"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/file.iudx.io/res-group-1",
                        "capabilities": [
                          "download"
                        ],
                        "type": "resourcegroup"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NGINX-Errors"
                }
              }
            }
          },
          "401": {
            "description": "If the user calling the API is not a registered consumer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Not allowed"
                      }
                    }
                  }
                }
              }
            }
          },
          "": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "cat_id": {
                        "type": "string",
                        "minLength": 1
                      },
                      "apis": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "type": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "cat_id",
                      "apis",
                      "type"
                    ]
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1",
                        "apis": [
                          "/ngsi-ld/v1/subscription",
                          "/ngsi-ld/v1/entityOperations/query",
                          "/ngsi-ld/v1/entities/iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1",
                          "/ngsi-ld/v1/entities",
                          "/ngsi-ld/v1/temporal/entities"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/res-group-1",
                        "apis": [
                          "/iudx/v1/adapter"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/file.iudx.io/res-group-1",
                        "apis": [
                          "/iudx/v1/upload",
                          "/iudx/v1/delete"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/file.iudx.io/res-group-1",
                        "apis": [
                          "/iudx/v1/download"
                        ],
                        "type": "resourcegroup"
                      },
                      {
                        "cat_id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/file.iudx.io/test",
                        "apis": [
                          "/iudx/v1/upload",
                          "/iudx/v1/delete"
                        ],
                        "type": "resourcegroup"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-2/consumer client certificate issued by IUDX and is a registered consumer**\n\nAllow consumers to see resources that they have been given access to along with capabilities\n\n**NOTE: Onboarder and data ingester access is not displayed**\n\n### Capabilities\n\nCapabilities map keywords to a set of APIs. Valid capabilities for consumers depends on the resource server containing the resource.\n\nFor **rs.iudx.org.in**, capabilities are:\n- `subscription` : *`/ngsi-ld/v1/subscription`*\n- `temporal` : *`/ngsi-ld/v1/temporal/entities`* , *`/ngsi-ld/v1/entities/<resource-group>`*\n- `complex` : *`/ngsi-ld/v1/entityOperations/query`* , *`/ngsi-ld/v1/entities/<resource-group>`* , *`/ngsi-ld/v1/entities`*, *`/ngsi-ld/v1/temporal/entities`* \n\nFor **file.iudx.org.in**, capabilities are:\n- `download` : *`/iudx/v1/download`*",
        "tags": [
          "Consumer APIs"
        ]
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "NGINX-Errors": {
        "title": "SSL Errors",
        "type": "object",
        "description": "   Any certificate error will result in a `400 Bad Request` error. The following errors are possible:\n   - No client certificate sent with request for API that requires a client side certificate\n   - Error in client certificate verification. This can likely be caused by using an expired certificate to call the API\n   - Making an HTTP request to an HTTPS endpoint",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "enum": [
                  "Error occured during certificate verification. (Is your certificate expired?)",
                  "No SSL certificate sent with request",
                  "Invalid Request"
                ]
              }
            }
          }
        },
        "x-examples": {
          "No client certificate sent": {
            "error": {
              "message": "No SSL certificate sent with request"
            }
          },
          "HTTP request to HTTPS endpoint": {
            "error": {
              "message": "Invalid Request"
            }
          },
          "Client certificate error": {
            "error": {
              "message": "Error occured during certificate verification. (Is your certificate expired?)"
            }
          }
        }
      },
      "Error-Message": {
        "title": "Error-Message",
        "type": "object",
        "description": "Generic Error Message",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "Incorrect-Cert-Class": {
        "type": "object",
        "x-examples": {
          "Calling /auth/v1/token/introspect API with": {
            "error": {
              "message": "A class-1 certificate is required to call this API"
            }
          },
          "Calling /auth/v1/revoke API with consumer certificate": {
            "error": {
              "message": "A class-3 or above certificate is required to call this API"
            }
          }
        },
        "description": "If an API is called with an incorrect certificate (non IUDX or incorrect class)",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "A class-* (or above) certificate is required to call this API"
              }
            }
          }
        }
      }
    }
  }
}
{
  "openapi": "3.0.0",
  "info": {
    "title": "IUDX Auth",
    "version": "1.0",
    "description": "API specification for IUDX Auth operations. All operations require a valid IUDX recognized HTTP client certificate.",
    "contact": {
      "name": "Mahidhar Chellamani",
      "url": "https://www.iudx.org.in/",
      "email": "mahidhar.chellamani@datakaveri.org"
    }
  },
  "servers": [
    {
      "url": "https://authorization.iudx.org.in",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/auth/v1/certificate-info": {
      "post": {
        "summary": "Get user certificate details",
        "tags": [],
        "operationId": "post-auth-v1-certificate-info",
        "parameters": [],
        "description": "Requires a valid HTTP client certificate. Get and validate certificate details.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "certificate-class": {
                      "type": "integer",
                      "description": "The certificate class"
                    },
                    "serial": {
                      "type": "string"
                    },
                    "fingerprint": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "certificate-class",
                    "serial",
                    "fingerprint"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "test@iisc.ac.in",
                      "certificate-class": 3,
                      "serial": "1b5e3735d350d93918730bb7e467fd1d3350e2b8",
                      "fingerprint": "b4:5f:51:3d:35:af:cf:38:a9:98:a7:25:07:89:88:67:0e:17:13:cf"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "[SSL Errors](reference/IUDX-Auth.v1.json/components/schemas/NGINX-Errors)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NGINX-Errors"
                }
              }
            }
          }
        }
      }
    },
    "/auth/v1/token": {
      "post": {
        "summary": "Request for a token",
        "operationId": "post-auth-v1-token",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/v1/token/introspect": {
      "post": {
        "summary": "Introspect a token",
        "operationId": "post-auth-v1-token-introspect",
        "responses": {
          "200": {
            "description": "A successful introspection will return details of the token. ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "consumer": {
                      "type": "string",
                      "description": "Email of consumer who requested the token"
                    },
                    "expiry": {
                      "type": "string",
                      "description": "Time of expiry of token",
                      "format": "date-time"
                    },
                    "request": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The resource ID"
                          },
                          "apis": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "methods": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "body": {
                            "type": "null"
                          }
                        }
                      }
                    },
                    "consumer-class-certificate": {
                      "type": "integer",
                      "description": "Class of the certificate that requested the token"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "consumer": "test@iisc.ac.in",
                      "expiry": "2020-09-27T10:36:36.893Z",
                      "request": [
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/group-1/*",
                          "apis": [
                            "/ngsi-ld/v1/subscription"
                          ],
                          "body": null,
                          "methods": [
                            "*"
                          ]
                        },
                        {
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/group-1/two",
                          "apis": [
                            "/ngsi-ld/v1/entities"
                          ],
                          "body": null,
                          "methods": [
                            "*"
                          ]
                        }
                      ],
                      "consumer-certificate-class": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `token` is missing or is a malformed token\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Missing token field": {
                    "value": {
                      "error": {
                        "message": "No 'token' found in the body"
                      }
                    }
                  },
                  "Malformed token": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "- If the token:\n  - does not exist\n  - is expired\n  - has been revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Invalid 'token'"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Requires a valid class-1 client certificate issued by IUDX OR a valid certificate issued by a trusted CA (e.g. Let's Encrypt). The certificate must contain the hostname of the resource server**\n\nResource servers can introspect tokens to get the resource IDs, APIs etc. that the token has been issued for\n\n**A resource server can only introspect a token that has been issued for resources that belong to it. **\n\nFor example, a resource ID __*datakaveri.org/73e2..aab4/rs.iudx.org.in/pune-aqm/resource1*__ refers to a resource hosted in the resource server __*rs.iudx.org.in*__. A token issued for this resource can be instrospected by the server __*rs.iudx.org.in*__. However, if a server __*rs.iudx.io*__ obtains the token and performs Introspect, an *Invalid token* error will be returned.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "A valid IUDX token"
                  }
                },
                "required": [
                  "token"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "token": "authorization.iudx.org.in/test@iisc.ac.in/704b949bdb7a7217c124c62821df6b62"
                  }
                }
              }
            }
          },
          "description": "The token is sent in the request"
        }
      }
    },
    "/auth/v1/token/revoke": {
      "post": {
        "summary": "Revoke a token",
        "operationId": "post-auth-v1-token-revoke",
        "responses": {
          "200": {
            "description": "The response will contain the number of tokens revoked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "num-tokens-revoked": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "num-tokens-revoked"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "num-tokens-revoked": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `token-hashes` is missing\n- If `token-hashes` is not a valid JSON array\n- If a token hash is invalid, does not exist or has already been revoked \n    - **All valid tokens before the invalid token hash will be revoked. `num-tokens-revoked` will be returned with the number of tokens revoked till the invalid token hash**\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string"
                            },
                            "invalid-input": {
                              "type": "string",
                              "description": "The invalid hash"
                            },
                            "num-tokens-revoked": {
                              "type": "string",
                              "description": "number of tokens revoked in array till the invalid token hash"
                            }
                          },
                          "required": [
                            "message"
                          ]
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "If token-hashes missing": {
                    "value": {
                      "error": {
                        "message": "No 'tokens' or 'token-hashes' found"
                      }
                    }
                  },
                  "If token-hashes is invalid JSON array": {
                    "value": {
                      "error": {
                        "message": "'token-hashes' must be a valid JSON array"
                      }
                    }
                  },
                  "If a token hash is invalid, does not exist or is already revoked": {
                    "value": {
                      "//": "Unsafe characters (if any) in 'invalid-input' field have been replaced with '*'",
                      "error": {
                        "message": "Invalid 'token hash'",
                        "invalid-input": "837788ad6d1b351f7b8382c6c9f8032f71f3f2d059b7f27b32d15d9685cf16f0",
                        "num-tokens-revoked": 9
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "** Requires a valid class-3/provider client certificate issued by IUDX **\n\nRevoke list of tokens using token hashes obtained from audit API. The revoked tokens cannot be introspected and are thus invalid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token-hashes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-f]+$",
                      "minLength": 64,
                      "maxLength": 64
                    }
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "token-hashes": [
                      "ba097163a905f6cf32cfdb2092fa3ec12073e87b8b1b3cc42f5e029ba7980eb7",
                      "837788ad6d1b351f7b8382c6c9f8032f71f3f2d059b7f27b32d15d9685cf16f0"
                    ]
                  }
                }
              }
            }
          },
          "description": "The request should contain an array of token hashes. (Each hash must be in lower-case hex representation)"
        }
      }
    },
    "/auth/v1/token/revoke-all": {
      "post": {
        "summary": "Revoke all tokens belonging to a certificate",
        "operationId": "post-auth-v1-token-revoke-all",
        "responses": {
          "200": {
            "description": "The number of tokens revoked for that particular certficate/consumer will be returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "num-tokens-revoked": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "num-tokens-revoked"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "num-tokens-revoked": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If `serial`, `fingerprint` is missing or invalid\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "Missing serial": {
                    "value": {
                      "error": {
                        "message": "No 'serial' found in the body"
                      }
                    }
                  },
                  "Missing fingerprint": {
                    "value": {
                      "error": {
                        "message": "No 'fingerprint' found in the body"
                      }
                    }
                  },
                  "Invalid serial": {
                    "value": {
                      "error": {
                        "message": "Invalid 'serial'"
                      }
                    }
                  },
                  "Invalid fingerprint": {
                    "value": {
                      "error": {
                        "message": "Invalid 'fingerprint"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "** Requires a valid class-3/provider client certificate issued by IUDX **\n\nRevoke all tokens issued to a particular consumer based on their certificate. The certificate serial number and fingerprint are obtained from audit API. The revoked tokens cannot be introspected and are thus invalid.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serial": {
                    "type": "string",
                    "pattern": "^[0-9a-f]+$"
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "valid certificate fingerprint delimited by :"
                  }
                },
                "required": [
                  "serial",
                  "fingerprint"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "serial": "5379c47881b51bb65c3a01da22dc175e6ec03e04",
                    "fingerprint": "a0:75:1b:72:7c:77:86:04:47:ce:25:fb:e1:ad:0c:29:db:87:16:71"
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/auth/v1/audit/tokens": {
      "post": {
        "summary": "Audit tokens",
        "operationId": "post-auth-v1-audit-tokens",
        "responses": {
          "200": {
            "description": "- The `token-hash` field can be used to revoke the token using the `/auth/v1/token/revoke` API\n- The `certificate-serial-number` and `certificate-fingerprint` fields can be used to revoke all tokens issued to that consumer/certificate using the `/auth/v1/token/revoke-all` API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "as-consumer": {
                      "type": "array",
                      "items": {}
                    },
                    "as-provider": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "consumer": {
                            "type": "string",
                            "description": "email address of consumer"
                          },
                          "token-hash": {
                            "type": "string",
                            "description": "SHA-256 of token"
                          },
                          "token-issued-at": {
                            "type": "string",
                            "description": "Time when token was issued",
                            "format": "date-time"
                          },
                          "expiry": {
                            "type": "string",
                            "description": "Time when token will expire",
                            "format": "date-time"
                          },
                          "introspected": {
                            "type": "boolean",
                            "description": "If the token was introspected"
                          },
                          "revoked": {
                            "type": "boolean",
                            "description": "If the token has been revoked"
                          },
                          "expired": {
                            "type": "boolean",
                            "description": "If the token has expired"
                          },
                          "certificate-serial-number": {
                            "type": "string",
                            "description": "Serial number of certificate of consumer"
                          },
                          "certificate-fingerprint": {
                            "type": "string",
                            "description": "Fingerprint of certificate of consumer"
                          },
                          "request": {
                            "type": "array",
                            "description": "Array of requests for the token",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The resource ID"
                                },
                                "methods": {
                                  "type": "array",
                                  "description": "Accepted methods for the resource ID",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "apis": {
                                  "type": "array",
                                  "description": "Accepted APIs for the resource ID",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "body": {
                                  "type": "null"
                                }
                              }
                            }
                          },
                          "geoip": {
                            "type": "object",
                            "description": "Geo properties of token obtained from IP address from which token was requested (GeoIP)",
                            "properties": {
                              "ll": {
                                "type": "array",
                                "description": "lat, long \n",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "city": {
                                "type": "string"
                              },
                              "region": {
                                "type": "string"
                              },
                              "country": {
                                "type": "string"
                              },
                              "timezone": {
                                "type": "string"
                              }
                            }
                          },
                          "api-called-from": {
                            "type": "null"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "as-consumer": [
                        null
                      ],
                      "as-provider": [
                        {
                          "consumer": "bryan.robert@datakaveri.org",
                          "token-hash": "4d13b4e1142ea2453cc257f1114c0bce9acd84e599ceed545df707405991d285",
                          "token-issued-at": "2020-09-19T12:11:00.168Z",
                          "introspected": true,
                          "revoked": false,
                          "expiry": "2020-09-19T13:11:00.168Z",
                          "expired": true,
                          "certificate-serial-number": "5379c47881b51bb65c3a01da22dc175e6ec03e04",
                          "certificate-fingerprint": "a0:75:1b:72:7c:77:86:04:47:ce:25:fb:e1:ad:0c:29:db:87:16:71",
                          "request": [
                            {
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/example.com/1/*",
                              "apis": [
                                "/ngsi-ld/v1/subscription"
                              ],
                              "body": null,
                              "methods": [
                                "*"
                              ]
                            }
                          ],
                          "geoip": {
                            "ll": [
                              16.5136,
                              80.6297
                            ],
                            "city": "Vijayawada",
                            "region": "AP",
                            "country": "IN",
                            "timezone": "Asia/Kolkata"
                          },
                          "api-called-from": null
                        },
                        {
                          "consumer": "aman.asif@datakaveri.org",
                          "token-hash": "8f652451e78b68ec02e84b00abdd7ae980b5278f5b9f4ca2a88302026a5ce7c7",
                          "token-issued-at": "2020-09-17T08:29:35.012Z",
                          "introspected": false,
                          "revoked": false,
                          "expiry": "2020-09-17T09:29:35.012Z",
                          "expired": true,
                          "certificate-serial-number": "6252129ece3e5e8b5ce1238bba4ef324d6142a17",
                          "certificate-fingerprint": "bb:31:09:aa:46:e0:a1:24:dc:07:a8:87:7f:30:1b:da:f7:29:8f:07",
                          "request": [
                            {
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.com/biggroup-3/item-1",
                              "apis": [
                                "/ngsi-ld/v1/temporal/entities"
                              ],
                              "body": null,
                              "methods": [
                                "*"
                              ]
                            }
                          ],
                          "geoip": {
                            "ll": [
                              11.248,
                              75.7804
                            ],
                            "city": "Kozhikode",
                            "region": "KL",
                            "country": "IN",
                            "timezone": "Asia/Kolkata"
                          },
                          "api-called-from": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "- If the `hours` field is missing or invalid\n- SSL Errors",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                    },
                    {
                      "$ref": "#/components/schemas/NGINX-Errors"
                    }
                  ]
                },
                "examples": {
                  "hours missing": {
                    "value": {
                      "error": {
                        "message": "No 'hours' found in the body"
                      }
                    }
                  },
                  "hours invalid": {
                    "value": {
                      "error": {
                        "message": "'hours' must be a positive number"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./IUDX-Consent.v1.json#/components/schemas/Error-Message"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": {
                        "message": "Internal error!"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "** Requires a valid class-3/provider client certificate **\n\nA Provider can use the Audit API to get details of the tokens issued for their resources. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hours": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 43800,
                    "description": "Number of hours for which the audit-report has to be generated"
                  }
                },
                "required": [
                  "hours"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "hours": 5
                  }
                }
              }
            }
          },
          "description": "`hours` determines the number of hours for which the audit report is returned"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NGINX-Errors": {
        "title": "SSL Errors",
        "type": "object",
        "description": "   Any certificate error will result in a `400 Bad Request` error. The following errors are possible:\n   - No client certificate sent with request for API that requires a client side certificate\n   - Error in client certificate verification. This can likely be caused by using an expired certificate to call the API\n   - Making an HTTP request to an HTTPS endpoint",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "enum": [
                  "Error occured during certificate verification. (Is your certificate expired?)",
                  "No SSL certificate sent with request",
                  "Invalid Request"
                ]
              }
            }
          }
        },
        "x-examples": {
          "No client certificate sent": {
            "error": {
              "message": "No SSL certificate sent with request"
            }
          },
          "HTTP request to HTTPS endpoint": {
            "error": {
              "message": "Invalid Request"
            }
          }
        }
      }
    },
    "securitySchemes": {}
  }
}